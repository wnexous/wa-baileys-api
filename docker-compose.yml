version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/wa_baileys_api?schema=public
      - SESSION_DIRECTORY=/app/sessions
      - WEBHOOK_URL=${WEBHOOK_URL:-}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-password}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-key}
      - API_TOKEN=${API_TOKEN:-your-fixed-api-token}
      - HOST=0.0.0.0
    volumes:
      - ./sessions:/app/sessions
    depends_on:
      db-init:
        condition: service_completed_successfully
    restart: unless-stopped
    networks:
      - wa_network

  db:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=wa_baileys_api
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - wa_network

  db-init:
    image: postgres:14-alpine
    environment:
      - PGPASSWORD=postgres
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./init.sql:/init.sql
    command: psql -h db -U postgres -d wa_baileys_api -f /init.sql
    restart: "no"
    networks:
      - wa_network

volumes:
  postgres_data:

networks:
  wa_network:
    driver: bridge
